<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/08/01/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/08/01/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java语法规范"><a href="#Java语法规范" class="headerlink" title="Java语法规范"></a>Java语法规范</h1><ul><li>java语句必须以分号”;”结尾; </li><li>括号一一匹配;</li><li>主方法的代码只能写在{}里面;<br><img src="/../image/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%9B%BE.jpg" alt="语法实例"></li></ul><h1 id="变量与关键字"><a href="#变量与关键字" class="headerlink" title="变量与关键字"></a>变量与关键字</h1><p>java里面没有释放内存的操作，也没有指针<br>java里面的变量是存放在jvm管理的内存里面的,c语言是存放在内存中(有时候需要手动释放),Java是由jvm负责管理释放内存的。<br>Java是强类型语言,必须定义才能使用，和Python相反<br>具体定义与c语言相同<br>Java里面定义常量必须要用到final关键字</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>&#x2F;&#x2F;单行注释<br>多行注释是先按下&#x2F;**然后再按回车，自动补全<br>&#x2F;&#x2F;TODO 待做标记</p><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="Java数据类型主要分为基本数据类型和引用类型"><a href="#Java数据类型主要分为基本数据类型和引用类型" class="headerlink" title="Java数据类型主要分为基本数据类型和引用类型"></a>Java数据类型主要分为基本数据类型和引用类型</h2><h2 id="基本数据类型-1"><a href="#基本数据类型-1" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>###计算机中的二进制表示<br>Java中的数字是有符号数，这点和C语言不同，C语言是有有符号和无符号数两种。所以Java需要在数字首位加一个符号位。<br>原码就是1111这个四位数表示7，0111表示-7.<br>原码做加减法很麻烦，然后需要引入反码<br>反码就是正数不变，负数符号位不变，其他位取反。<br>但是反码的0有正负之分很不合理，需要引入补码。<br>补码，正数的补码就是正数本身<br>负数的补码是在反码的基础上加一。<br>4bit的范围就是-8~7(java用的就是补码)</p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><ul><li>byte字节型(8个位，一个字节)范围:-128<del>127(-2^7</del>2^7-1)</li><li>short短整型(16个位，两个字节)范围:-32768<del>32767(-2^15</del>2^15-1)</li><li>int短整型(32个位，四个字节)范围:(-2^31~2^31-1)</li><li>long长整型(64个位，八个字节)范围:(-2^63~2^31-1)，最后需要添加l或者L</li><li>如果超过long了就需要用到BigInteger.这是一个对象。定义方法如下：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"1234567890987653223456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>十进制，八进制(0开头)，十六进制(0x开头),二进制不能在代码里使用，会被当成十进制。</li></ul><h2 id="字符类型与字符串"><a href="#字符类型与字符串" class="headerlink" title="字符类型与字符串"></a>字符类型与字符串</h2><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul><li>char字符类型(16个比特位，2个字节，无符号)，从0~65535</li><li>使用Unicode表示就是\u0000~\uffff,字符串要用单引号括起来。</li><li>Java的字符串类型使用Unicode编码，Unicode编码包括ASCII码的全部内容同时还包括了全世界的语言，我们编译出来的.class文件也是使用Unicode编码得来的，Java其实支持中文变量名、方法、甚至类名。<br><img src="/../image/%E5%AD%97%E7%AC%A6%E5%9E%8B.jpg" alt="字符类型转换"></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>字符串不是基本类型，他是一个类，按住Ctrl键点击String即可查看相关说明。</li></ul><h3 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h3><ul><li>float单精度(32bit 4个字节)</li><li>double双精度(64bit 8个字节)</li><li>存储结构<br><img src="/../image/%E5%B0%8F%E6%95%B0%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg" alt="浮点数存储结构"></li><li>s是符号位(0是正，1是负)，e是阶码(表示指数位)，m是尾数(有效数字，开头一定是一，所以把一丢掉)<br>任意一个浮点数V都可以表示为<br>V&#x3D;(-1)^S * M *2^E</li><li>例如，十进制5.25对应的二进制为101.01。S&#x3D;0,M&#x3D;1.0101（0101）,E&#x3D;2+128。</li></ul><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>布尔类型（boolean）只有true和false两种值。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><ul><li>隐式类型转换支持字节数小的类型转换成字节数大的，例如，int类型可以直接转换成float类型。</li><li>规则：byte-&gt;short(char)-&gt;int-&gt;long-&gt;float-&gt;double</li><li>注意：long是64位的，float是32位的，但是因为浮点数的存储规则，32位(阶码是最高127，2的127次方)远比64位二进制大得多</li></ul><h3 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h3><p>牺牲精度强行进行转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">short</span> i<span class="token operator">=</span><span class="token number">129</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> a <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为-127。129(0000000010000001)-&gt;byte -127(10000001)</p><h3 id="数据类型自动提升"><a href="#数据类型自动提升" class="headerlink" title="数据类型自动提升"></a>数据类型自动提升</h3><p>byte、short、char类型在参与运算的过程中，自动提升到int类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span> a <span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不加(byte)会报错，因为计算过程中a提升到int参与计算了，赋值的时候，int不能转换为byte，所以会报错。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="赋值运算符和算术运算符"><a href="#赋值运算符和算术运算符" class="headerlink" title="赋值运算符和算术运算符"></a>赋值运算符和算术运算符</h3><ul><li>赋值运算符+、—、*、&#x2F;、%</li><li>+号还可以用来连接字符串<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好，"</span><span class="token operator">+</span><span class="token string">"世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>当存在和字符串不同类型的类型与字符串进行拼接，该类型会直接被当作字符串进行处理，运算顺序从左向右<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>++、–，自增运算符，自减运算符<br>a++,++a,a–,–a<br>a++是先返回值再进行自增操作<br>++a是先自增再返回值<br>a–是先返回值再自减<br>–a是先自减再返回值<br>++和–的优先级很高</li><li>逻辑运算符<br>&amp;&amp; 与 ||或 !非</li><li>位运算符<br>&amp;按位与<br>|按位或<br>^按位异或，不一样就是1<br>~按位非<br>&#96;&#96;&#96;java<br>public class Main {<br>  public static void main(String[] args){<br>  int a&#x3D;7;&#x2F;&#x2F;111<br>  int b&#x3D;19;&#x2F;&#x2F;10011<br>  System.out.println(a&amp;b);<br>  }<br>}<br>相与结果是11，也就是3。</li><li>三目运算符<br>为了简化代码得来的<br>判断条件?满足的返回值:不满足的返回值</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/29/java%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/07/29/java%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="开发环境JDK"><a href="#开发环境JDK" class="headerlink" title="开发环境JDK"></a>开发环境JDK</h1><p>JDK包括Java开发人员工具，以及JRE(负责运行Java)<br>搜索zulujdk下载JDK,Java8(LTS)带LTS的就是长期维护版本<br>安装完就行了</p><h1 id="安装idea"><a href="#安装idea" class="headerlink" title="安装idea"></a>安装idea</h1><p>直接安装就行</p><h1 id="初识Java运行机制"><a href="#初识Java运行机制" class="headerlink" title="初识Java运行机制"></a>初识Java运行机制</h1><p>java运行在jvm上面，所以java代码需要编译成jvm能看懂的字节码文件。<br>在idea上你能看到编译代码时会输出一个.class文件，可以打开命令行窗口直接输入 java+文件名,就可以直接运行了。<br><img src="/../image/java%E8%BF%90%E8%A1%8C.jpg" alt="图片"><br>.java文件编译成.class文件这样jvm才能看得懂。你也可以直接用命令行窗口通过javac 文件名.java直接编译。编译完在那个文件夹下生成.class文件。<br><img src="/../image/java%E7%BC%96%E8%AF%91.jpg" alt="图片"><br>生成完以后就可以直接运行了，注意是java直接加上文件名，而不是java+文件名.class</p><h1 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h1><p>.java文件通过java编译器编译成.class文件,然后.class文件被Jvm解释给操作系统，告诉操作系统应该要做哪些事。<br>java运行机制既有编译型又有解释型。<br><img src="/../image/java%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.jpg" alt="图片"><br>编译型语言运行机制<br><img src="/../image/%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.jpg" alt="图片"><br>解释型语言运行机制<br><img src="/../image/%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.jpg" alt="图片"></p><h1 id="idea功能介绍和使用"><a href="#idea功能介绍和使用" class="headerlink" title="idea功能介绍和使用"></a>idea功能介绍和使用</h1><p>学习idea的使用<a href="https://www.bilibili.com/video/BV1Gv411T7pi?p=4&vd_source=7f3dd25a00947d52a7f38bcfe4fa6531">B站</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
